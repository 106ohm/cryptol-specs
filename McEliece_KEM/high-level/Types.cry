module Types where


glob_t = 119
type t = 119
glob_n = 6960
type n = 6960
glob_m = 13
type m = 13
type d = 256
type mt = m*t //1547
//--------------------------------------------
// Structure Defined by spec
//--------------------------------------------
glob_k = (glob_n-glob_m*glob_t) // 5413
type k = (n-m*t) // 5413
// in order of general algorithm spec
type f2_T = Bit
type n_T = [n]f2_T
type k_T = [k]f2_T
type t_T = [t]f2_T
type m_T = [m]f2_T
type mt_T = [mt]f2_T  // also n-k
type public_key_T = [mt][k]f2_T
type H_T = [n-k][n]f2_T 
type H_tilde_T = [t][n][m]f2_T
type d_T = [d]f2_T
type field_element_T = m_T
type poly_T =  [t]field_element_T
type alphas_T = [n]field_element_T
type gamma_T =
    { p : poly_T                // [13]Bit
    , a : alphas_T              // [6960][13]Bit  //[n][m]Bit
    }
type s_T  = n_T
type private_key_T =
    { s : n_T                   // [870][8]Bit
    , g : gamma_T
    }

type C0_T = mt_T // also n-k //1547
type C1_T = d_T
type cipher_text_T =
    { C0 : C0_T
    , C1 : C1_T}
type hash_input_T =
    { n : Integer
    , v : n_T
    , C : cipher_text_T}

// a bit string of length and Hamming weight T
type weighted_T = n_T
type e_T = n_T

type session_key_T = [32]

type fn_get_goppa_T = gamma_T -> (n_T, Bool)
type fn_gauss_T = H_tilde_T -> (Bool, public_key_T)


//--------------------------------------------
// Structure Defined by reference implementation
//--------------------------------------------
// Base Types
type base_16t = [16]
type base_32t = [32]
type base_64t = [64]
type uint16t = [16]
type uint64t = [64]
type uint32t = [32]
type gf_t = base_t
//conversions
cvt_16 e = fromInteger `{[16]} (toInteger e)
cvt_32 e = fromInteger `{[32]} (toInteger e)
cvt_64 e = fromInteger `{[64]} (toInteger e)


//specific to low level implementation of goppa code
GFBITS =  13
type GFBITS_t =  13
type base_t = base_16t
// crypto_kem_SECRETKEYBYTES
type secretkey_t = [13908] base_t
type ciphertext_t = [226] base_t  // crypto_kem_CIPHERTEXTBYTES

type SYS_N_t = [n]base_t
type SYS_N8_t = [n/8] base_t
type SYS_T_double_t = [t*2]base_t
type SYS_T_plus1 = [t+1]base_t
SYS_T_double =  glob_t*2 // 238

// support_gen in benes
GFMASK  =  cvt_64 (((1:[32]) << GFBITS) - 1)
type j_size_t =  1024 //((1:[32]) << GFBITS)/8
type La_t = [32]
type Lb_t = [j_size_t][32]
type Lc_t = [GFBITS_t][j_size_t][32]

