module Key_Generation where

import Types

//TODO
random_element : field_element_T
random_element = ([True | i <- [1..m]])
random_elements : {t0}(fin t0, t0>=1) => [t0]field_element_T
random_elements = ([random_element | i <- [1..t0]])

//TODO: make irreducible poly
step_1 = random_elements `{ t0 = t-1}#[1]

// TODO: add power operation
step_3 : poly_T -> alphas_T -> H_T
step_3 g alphas = [[ f i j | j <- [1..n]] | i <- [1..t]]
    where f i j = aj / (g @ aj)
            where aj = alphas@j

// TODO: apply gaussian elimination
step_5 : H_T -> (Bool, public_key_T)
step_5 H_tilde = undefined

mk_gamma : Integer -> (gamma_T,public_key_T)
mk_gamma counter =
    if(flag) then ({p=g, a=alphas}, public_key)
    else if (counter < 100)
        then mk_gamma (counter+1)
    else undefined
    where
        // TODO check if g is irreducible
        (g: poly_T) = step_1
        (alphas: alphas_T) =  random_elements `{ t0 = n}
        (H_tilde: H_T) = step_3 g alphas
        (flag, public_key) = step_5 H_tilde

key_generation : [n]Bit -> (public_key_T, private_key_T)
key_generation s = (public_key, private_key) where
    (gamma: gamma_T, public_key: public_key_T) = mk_gamma 0
    (private_key: private_key_T) = {s=s, g=gamma}

