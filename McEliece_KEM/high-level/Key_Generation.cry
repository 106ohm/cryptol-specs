module Key_Generation where

import Types
import Shared


//h_ij  = a_j ^(i-1) / g(alpha_j)
compute_H_tilde : poly_T -> alphas_T -> [t][n][m]Bit
compute_H_tilde g alphas =
    [[ f i j | j <- [1..n]] | i <- [1..t]]
            where f i j = aj / (g @ aj)
                    where aj = alphas@j

mk_gamma 
	: [32]->[32] ->[inf]poly_T -> [inf]alphas_T -> fn_gauss_T
	-> (Bool, gamma_T, public_key_T)
mk_gamma counter counter_limit gs alphas fn_gauss =
	if(counter<counter_limit) then 
		if(flag) 
			then (True, current_gamma, public_key)
			else mk_gamma (counter+1) counter_limit gs alphas fn_gauss
		where
			g = gs@counter
			alpha = alphas@counter
            // current gamma selection if successful 
			current_gamma = { p = g, a = alpha }
            // step 3
			(H_tilde: H_tilde_T) = compute_H_tilde g alpha
            //step 4
			(flag, public_key) = fn_gauss H_tilde
	else 
		(False, zero, zero)


// g: uniform random monic irreducible polynomial 
// alpha :uniform random sequence
// counter_limit : how many times should to go back to step 1 if H can be transformed to systematic form
// fn_gauss_T : function to apply Gaussian elimination
//            see also Gauss.cry for example
// failed state in this case is zero
key_generation
	 : [n]Bit -> [inf]poly_T -> [inf]alphas_T -> [32] -> fn_gauss_T
	-> (public_key_T, private_key_T)
key_generation s gs alphas counter_limit fn_gauss = (public_key, private_key) where
    (rtn, gamma: gamma_T, public_key: public_key_T) = mk_gamma 0 counter_limit gs alphas fn_gauss
    (private_key: private_key_T) = if rtn then  {s=s, g=gamma} else zero

