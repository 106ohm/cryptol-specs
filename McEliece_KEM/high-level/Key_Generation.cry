module Key_Generation where

import Types
import Shared

mk_gamma : Integer -> (gamma_T, public_key_T)
mk_gamma counter =
    if(flag) then ({p=g, a=alphas}, public_key)
    else if (counter < 100)
        then mk_gamma (counter+1)
    else undefined
    where
        // TODO check if g is irreducible
        (g: poly_T) = step_1
        (alphas: alphas_T) =  random_elements `{ t0 = n}
        (H_tilde: H_T) = step_3 g alphas
        (flag, public_key) = step_5 H_tilde

key_generation : [n]Bit -> (public_key_T, private_key_T)
key_generation s = (public_key, private_key) where
    (gamma: gamma_T, public_key: public_key_T) = mk_gamma 0
    (private_key: private_key_T) = {s=s, g=gamma}

