module Encapsulation where

import Types
import Shared 

// encoding subroutine
encoding_subroutine : e_T -> public_key_T -> C0_T
encoding_subroutine e T = C0 where
    (H:H_T) = compute_H T
    (C0:C0_T) = compute_He H e

encapsulation
    : public_key_T ->  e_T
    -> (session_key_T, cipher_text_T)
encapsulation T e =  (K, C) where
    // step 1. uniform random vector e (given as input)
    // step 2. use encoding subroutine on e and public key T to compute Co
    (C0 : C0_T) = encoding_subroutine e T
    // step 3.
    (C1: C1_T) = compute_hash_e 2 e
    (C: cipher_text_T) = {C0 = C0, C1 = C1}
    (K: session_key_T) = compute_hash_eC 1 e C

