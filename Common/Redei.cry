/*
 Redei rational function
*/

module Common::Redei where

import Common::mod_ring_arith

/* Compute the Redei rational function exploiting a well-known recurrence*/
Redei_rec : {K} (fin K, K >= 4) => [K] -> [K] -> [K] -> [K] -> [K]
Redei_rec exp N first second = mod_ring_div N g h where
                              (g, h) = work @ (exp-1)
	                      work = [ (second, 1:[K]) ]
				     #
				     [ (mod_ring_add N (mod_ring_mul N second G) (mod_ring_mul N first H),
				        mod_ring_add N G (mod_ring_mul N second H))
			                                  | G  <- (drop`{0} work).0
					                  | H  <- (drop`{0} work).1]

/* Compute the Redei rational function exploiting the recurrence described in
"Fast evaluation of Redei functions", Willi More,
Applicable Algebra in Engineering, Communication and Computing, 1995.*/
// TODO
   
CorrectRedei : {K} (fin K, K >= 4) => [K] -> [K] -> [K] -> [K] -> Bit
property CorrectRedei exp N first second = ( test_quadratic_non_residual N first ) ==> Redei_rec exp N first second == Redei exp N first second
